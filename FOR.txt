FOR Command Guide with Examples
The FOR command in Windows batch scripting allows you to perform a command several times, based on a set of data. It is commonly used to iterate over files, folders, numbers, or strings, and can be utilized in various ways depending on the syntax.


1. Syntax and Usage

[Syntax]
FOR-Files (or a list of folders)
 FOR %%parameter IN (set) DO command
 
FOR-Files-Rooted at Path
 FOR /R [drive:]path %%parameter IN (set) DO command

FOR-Folders
 FOR /D %%parameter IN (folder_set) DO command
  
FOR-List of numbers
 FOR /L %%parameter IN (start, step, end) DO command
 
FOR-File Contents 
 FOR /F ["options"] %%parameter IN (filenameset) DO command
 FOR /F ["options"] %%parameter IN ("Text string to process") DO command
 
FOR-Command Results
 FOR /F ["options"] %%parameter IN ('command to process') DO command


2. How the FOR Command Works

The FOR command iterates over a set of data, assigns each item to a parameter, and then executes a command using that parameter. It performs the following operations:

Take a set of data: This could be a list of files, a range of numbers, or the output of a command.

Make the FOR Parameter (%%G) equal to a part of that data: For example, if the set consists of filenames, %%G will represent the current file in each iteration.

Perform the command: You can use the parameter %%G as part of the command being executed.

Repeat for each line item of data: The command is executed for each item in the set, with %%G taking on a new value each time.


3. FOR Parameters

The FOR loop uses parameters to refer to the current item in the iteration. The first parameter is defined using a single character, for example, %%G.

%%G: The first parameter (you can use other letters, but %%G is most common as it avoids conflicts with other special format letters).

If the set contains multiple items, extra parameters are automatically defined to hold each value: %%H, %%I, %%J, etc.

You can choose any letter for the parameters, but it’s best to use characters that don’t conflict with reserved format letters (examples: a, d, f, etc.).


Examples:

%%G is the first variable.
%%H is the second variable, and so on.


4. Types of FOR Loops

FOR with File or Folder Set

To loop through a set of files or directories, you can specify a wildcard in the set.

Example:
 FOR %%G IN (*.txt) DO echo %%G

This command will echo the names of all .txt files in the current directory.


FOR with Recursive Search (/R)

You can also use the /R flag to recursively process files or directories in subfolders.

Example:
 FOR /R %%G IN (*.txt) DO echo %%G

This will loop through all .txt files in the current directory and all subdirectories.


FOR with Folders

To loop through directories, use the /D flag.

Example:
 FOR /D %%G IN (C:\Projects\*) DO echo %%G

This will loop through all folders in C:\Projects and echo their names.


FOR with Number List (/L)

You can loop through a range of numbers using the /L flag.

Example:
 FOR /L %%G IN (1, 1, 10) DO echo %%G

This loops from 1 to 10 with a step of 1.


FOR with File Contents (/F)

You can read the contents of a file or process command output line by line with the /F flag.

Example (reading a file):
 FOR /F %%G IN (file.txt) DO echo %%G

This will echo each line from file.txt.


Example (reading command output):
 FOR /F %%G IN ('dir /b') DO echo %%G

This will echo the output of the dir /b command (a list of filenames).


5. Working with Variables Inside FOR Loops

When using variables inside a FOR loop, you may need to use Delayed Variable Expansion to update the variable within each iteration. Without delayed expansion, the variable value won’t update until the entire loop finishes.

Example without Delayed Expansion:
 @echo off
 SET count=1
 FOR /f "tokens=*" %%G IN ('dir /b') DO (
     echo %count%:%%G
     set /a count+=1
 )


In this example, %count% will always print 1 because variables aren’t updated during the loop iteration.

Example with Delayed Expansion:
 @echo off
 SET count=1
 SETLOCAL ENABLEDELAYEDEXPANSION
 FOR /f "tokens=*" %%G IN ('dir /b') DO (
     echo !count!:%%G
     set /a count+=1
 )
 ENDLOCAL

Here, !count! will update for each iteration and show the correct incremented value.


6. Common FOR Loop Usage Examples

List all .txt files in a folder:
 FOR %%G IN (*.txt) DO echo %%G

Loop through subdirectories and execute a command:
 FOR /D %%G IN (C:\path\to\folders\*) DO echo Processing folder %%G

Count files in a directory:
 SET count=0
 FOR %%G IN (*) DO (
     SET /A count+=1
 )
 echo There are !count! files in the directory.


7. Notes and Best Practices

Wildcard Characters: The FOR command supports wildcards (* and ?) in the IN clause for selecting files or folders.

Recursive Directory Search: Use the /R option to process files in all subdirectories.

Variable Expansion: Use SETLOCAL ENABLEDELAYEDEXPANSION when updating variables during a loop.

File Processing: Use the /F flag for reading file contents or processing command output line by line.


8. Error Handling

If no files match the wildcard, the command will not execute.

The FOR command does not set the %ERRORLEVEL% on its own, but you can use error handling mechanisms such as IF statements to catch errors.


