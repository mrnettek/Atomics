This content explains how to use the default Microsoft command interpreter, cmd.exe, on Windows NT-based operating systems. It covers both the built-in commands provided by Microsoft and the process of writing Windows batch scripts.

Note that this book focuses on 32-bit Windows commands applicable to modern, NT-based Windows versions. It does not address commands exclusive to DOS environments (examples: Windows 95/98/Me), whose built-in command interpreters are actually DOS programs, not Win32 executables.

To check your operating system version, use the VER command.

In this text, we first describe the Windows NT command interpreter itself—how it receives and processes user commands—followed by an overview of the available commands. For a comprehensive command list with brief descriptions, open a command prompt and type:
help

To display help on a specific command, type:
<command-name> /?

The subject matter here is often referred to as "batch programming," "batch file programming," or "Windows shell scripting," though "batch" historically refers to scripting in both MS-DOS and Windows environments. While cmd.exe is considered a legacy technology for Windows scripting, it remains useful for straightforward tasks due to its concise syntax and faster startup time, as well as its traditional character-stream-based pipelining (familiar from other operating systems). In contrast, PowerShell, a modern alternative based on .NET, offers object-based pipelining, floating-point arithmetic, large integer support, GUI capabilities through .NET classes, and more extensive language features.

Other scripting options on Windows include popular cross-platform tools like Python (with pywin32 and wmi libraries), though these typically require separate installation.

--------------------------------------------------------------------------------
Using the Windows Command Interpreter
--------------------------------------------------------------------------------

1. How a Command Line Is Interpreted
-----------------------------------
When cmd.exe processes a command line, it follows four main steps:

1) Variable Substitution  
   The command line is scanned for variable references (example: %PATH%, %1) which are replaced by their values.

2) Quoting  
   Special characters can be "quoted" to neutralize their special roles (example: using " or ^).

3) Syntax  
   The command line is parsed into a sequence of commands, potentially forming pipelines or compound commands.

4) Redirection  
   Redirection operators (example: >, >>, 2>) are applied and then removed from the effective command string before the relevant command executes.


2. Variable Substitution
------------------------
A command line can include variables in the form %<name>%, where <name> is typically an environment variable or a positional parameter (%1, %2, etc.). 

Examples:
  %PATH% → Replaced by the content of PATH.
  %USERNAME% → Replaced by the current user name.
  %n (where n is 0–9) → Represents the nth parameter passed to a batch file.
  %* → Expands all command-line arguments (except %0).

Special Variable Names
----------------------
Certain names are not visible with SET but remain accessible with %...%. For details, type:
help set

Some examples:
 Name                Replacement Value
 %CD%                The current directory (without a trailing slash unless at root).
 %TIME%              The system time in HH:MM:SS.mm format (may vary by locale).
 %DATE%              The system date in a locale-specific format.
 %RANDOM%            A pseudorandom integer in the range 0–32767.
 %ERRORLEVEL%        The exit code (error level) of the last command or called script.
 %CMDEXTVERSION%     The version of the Command Processor Extensions.
 %CMDCMDLINE%        The command line used to start the current cmd.exe.

Example usage in a batch file:
  echo Current time is %TIME%
  echo Random number is %RANDOM%
  echo Error level is %ERRORLEVEL%

Tip: In batch files, if you need a literal percent sign, type %% instead of %.


3. Quoting and Escaping
-----------------------
To prevent special characters from taking effect:
- Enclose text in double quotes: example: "string with &".
- Use the caret ^ to escape a character, example: echo Johnson ^& son.

Characters typically needing escaping/quoting include <, >, |, &, and ^. In some scenarios, ! and \ also require escaping.  
- Percent sign (%) in a batch file must be written as %% to produce a literal %.  
- When quoting a string, the quotation marks become part of the argument.  
- When using ^ for escaping, the caret itself is not passed as part of the argument.

Examples:
  echo "Johnson & son"
  echo Johnson ^& son
  echo The ratio was 47%%   (in a batch file)

You can also use the backslash (\) in certain cases, but in cmd.exe, the caret (^) is the more standard escaping character.


4. Syntax
---------
A command line may consist of one or more commands connected by operators:

- Simple Commands:  
  A command name plus arguments and possibly redirection  
  (example: dir *.txt >somefile).

- Pipelines:  
  Several simple commands joined by |, where each command's output goes into the next command's input  
  (example: dir *.txt | more).

- Compound Commands:  
  Pipelines separated by control operators:  
   &  (unconditional): always run the next command.  
   && (conditional success): run the next command only if the previous succeeded (exit code 0).  
   || (conditional failure): run the next command only if the previous failed (exit code ≠ 0).  

- Parenthesized Commands:  
  A compound command wrapped in parentheses, enabling you to redirect its overall output  
  (example: ( pushd temp & dir & popd ) > somefile).

Examples:
  dir & echo Done
  dir && echo Success || echo Failure
  (echo Line 1 & echo Line 2) > output.txt


5. Redirection
--------------
Redirection modifies where input, output, and error streams go.

Common operators:
 >   writes standard output to a file, overwriting existing content.
 >>  appends standard output to a file.
 2>  redirects standard error.
 &   can be used to merge or redirect one file handle to another (example: 2>&1).

Examples:
  dir *.txt > listing.log          // Overwrites listing.log
  dir *.txt >> listing.log         // Appends to listing.log
  dir *.txt 2>NUL                  // Discards errors
  (echo Hello & echo World) > myfile.txt
  for %i in (1,2,3) do @echo %i > myfile.txt  // Overwrites per iteration


--------------------------------------------------------------------------------
6. How a Command Is Executed
--------------------------------------------------------------------------------
When you enter or execute a command in cmd.exe, the following order of operations usually applies:

1) Internal Commands  
   cmd.exe checks if the command is built into cmd.exe (like DIR, ECHO, SET). If it is, cmd.exe runs that immediately.

2) Aliases, Labels, or CALL (Within Batch Files)  
   If you're in a batch script and use CALL or GOTO, cmd.exe may look for a label (like :mylabel). However, this only applies to batch file contexts and is not part of normal command searching for executables.

3) External Commands  
   If the command is not recognized as an internal command, cmd.exe constructs possible filenames by appending each extension from the PATHEXT environment variable (commonly .COM, .EXE, .BAT, .CMD).  
   Then it searches the current directory first (unless the current directory is moved to the end of the search path in certain security configurations), followed by the directories listed in the PATH environment variable.  
   If a matching executable (or batch/script file) is found, cmd.exe uses CreateProcess (or a related Windows API function) to run it.

4) Error Message  
   If no match is found at all, cmd.exe shows the error:  
       "<command> is not recognized as an internal or external command, operable program or batch file."

Examples:
  - Typing dir on a fresh command line runs the internal "dir" command.
  - Typing notepad checks for notepad.exe in the current directory, then in all directories from PATH.
  - If a script file named myscript.cmd exists in the current folder, typing myscript runs it (assuming .CMD is in PATHEXT).

Remember that if your filename or path contains spaces, you might need quotes. For instance:
  "C:\Program Files\MyFolder\mytool.exe"


--------------------------------------------------------------------------------
7. Batch Reloading
--------------------------------------------------------------------------------
When a batch file runs, cmd.exe reloads its contents after executing each line or grouped block:

- If a line stands alone (like echo A), modifying that line in the batch file while it is waiting (for example, if there's a long-running ping command used as a delay) will affect how subsequent lines are executed.
- Commands grouped with & or within parentheses ( ... ) are read as a single block at once. Changes made inside that block won't be recognized until the block finishes.

Example illustrating batch reloading:
  @echo off
  echo Step 1
  ping -n 5 127.0.0.1 >nul  // 5-second delay
  echo Step 2
  // If "echo Step 2" is changed to "echo CHANGED" while ping is still running,
  // the next time cmd.exe reads that line, it will see the updated content.

When lines are grouped:
  @echo off
  ( echo Step 1 & ping -n 5 127.0.0.1 >nul & echo Step 2 )
  // This entire ( ... ) group is read as one block, so modifying it mid-execution
  // typically won't affect it until after the block finishes.


--------------------------------------------------------------------------------
8. Environment Variables
--------------------------------------------------------------------------------
Environment variables in cmd.exe:

- Are inherited by processes started from the command interpreter.
- Include built-in variables like COMSPEC, PATH, PATHEXT, and PROMPT.
- Are modified using commands such as SET, PATH, PROMPT, or the undocumented DPATH and KEYS.
- Can be unset by assigning them an empty string, for example: set myvar=.
- Are inherited from the parent process (e.g., Windows Explorer if opened through a desktop shortcut).
- Do not automatically update within a running cmd.exe session if changed via Control Panel or the Registry.


8.1 COMSPEC
-----------
Holds the full path of the command interpreter (cmd.exe), usually inherited from the parent process.


8.2 PATH
--------
A semicolon-delimited list of directories searched when locating an external command. Example usage:
  set PATH=C:\MyTools;%PATH%


8.3 PATHEXT
-----------
Lists file extensions treated as executable when typed without an extension (example: .COM;.EXE;.BAT;.CMD). You can add custom extensions to run scripts without typing their extensions, for example:
  setx PATHEXT %PATHEXT%;.PL


8.4 PROMPT
----------
Controls the command-line prompt display. Supports special tokens:

 Token    Result
 $$       Outputs $
 $A       Outputs &
 $B       Outputs `
 $C       Outputs (
 $D       Outputs current date
 $E       Escape character (ASCII 27)
 $F       Outputs )
 $G       Outputs >
 $H       Backspace (erases char)
 $L       Outputs <
 $M       Remote name if on a network drive
 $N       Current drive letter
 $P       Current drive letter + path
 $Q       Outputs =
 $S       Outputs a space
 $T       Current time
 $V       Windows version
 $_       Carriage return
 $+       Outputs + for each stacked directory via PUSHD

Example:
  prompt $P$G
  // Makes the prompt show C:\Folder>


--------------------------------------------------------------------------------
9. Switches (Command Options)
--------------------------------------------------------------------------------
Many commands use single-letter switches, often preceded by /, which differs from the dash (-) convention in other systems. Switches are usually case-insensitive in Windows commands.

For example:
  dir /?
  dir /b /s

Note: Some external tools ported from Unix (like grep) use the - prefix for their options.


--------------------------------------------------------------------------------
10. Error Level
--------------------------------------------------------------------------------
Most commands set an error level upon completion:
- 0 indicates success.
- Non-zero indicates some form of failure.

Error levels can be tested via:
- && and || (dir >NUL && echo Success)
- IF ERRORLEVEL 1 echo Failure
- Accessing %ERRORLEVEL%

Examples:
  dir >NUL && echo Success
  color 00 || echo Failure
  echo %ERRORLEVEL%
  if %ERRORLEVEL% equ 0 echo OK
  exit /b 1


--------------------------------------------------------------------------------
11. String Processing
--------------------------------------------------------------------------------
Substrings
----------
  set a=abcdefgh
  echo %a:~0,1%       // Outputs 'a'
  echo %a:~1%         // Outputs 'bcdefgh'
  echo %a:~-1%        // Outputs 'h'
  echo %a:~0,-2%      // Outputs 'abcdef'

Testing substring containment:
  if not "%a:bc=%"=="%a%" echo Contains 'bc'

Replacing substrings:
  set a=abcd & echo %a:c=%     // Removes 'c'
  set a=abcd & echo %a:c=e%    // Replaces 'c' with 'e'

Splitting:
  set myvar=a b,c;d
  for %%i in (%myvar%) do echo %%i
  // This splits on spaces, commas, and semicolons. 
  // By default, the FOR command breaks on standard delimiters (space, tab, comma, semicolon, etc.) unless otherwise specified.


--------------------------------------------------------------------------------
12. Command-Line Arguments
--------------------------------------------------------------------------------
Accessed as %1, %2, ..., %9.  
%0 is the batch file name itself.  
%* represents all arguments (except %0).  
Use SHIFT to move arguments left.  

Quoted arguments keep their quotes as part of the string unless you use the tilde modifiers (see next section).  
Examples:

  if -%1-==-- echo "No argument"

  :loop
    if -%1-==-- goto done
    echo %1
    shift
    goto loop
  :done

If you invoke a batch script like "myscript one two three", then:
 %1 = one
 %2 = two
 %3 = three
 %* = one two three


--------------------------------------------------------------------------------
13. Percent Tilde
--------------------------------------------------------------------------------
Special syntax allows extracting parts of a filename passed as an argument. For example, for %1:

 Syntax   Result
 %~f1     Full path (drive + path)
 %~d1     Drive letter only
 %~p1     Folder path (without drive), with trailing slash
 %~n1     File name (no path, no extension)
 %~x1     File extension
 %~s1     Short 8.3 version of path
 %~a1     File attributes
 %~t1     Timestamp of last modification
 %~z1     File size
 %~dpnx1  Combination of several modifiers

These apply similarly to loop variables like %%i in a FOR command.

Example:
  for %%A in (C:\Windows\notepad.exe) do (
    echo Full path: %%~fA
    echo Drive only: %%~dA
    echo Path only: %%~pA
    echo Name only: %%~nA
    echo Extension: %%~xA
    echo 8.3 path: %%~sA
    echo Size: %%~zA
  )


--------------------------------------------------------------------------------
14. Functions (Subprograms)
--------------------------------------------------------------------------------
You can emulate functions in batch files using CALL, labels, and optional SETLOCAL/ENDLOCAL. For example:

  @echo off
  call :power 2 4
  echo %result%
  goto :eof

  :power
    setlocal
    set /a counter=%2
    set /a interim_product=%1
    :loop
    if %counter% gtr 1 (
      set /a interim_product=interim_product * %1
      set /a counter=counter - 1
      goto :loop
    )
    endlocal & set result=%interim_product%
    goto :eof


--------------------------------------------------------------------------------
15. Calculation
--------------------------------------------------------------------------------
SET /A supports 32-bit signed integer arithmetic and bitwise operations (+, -, *, /, %, &, |, ^, <<, >>, ~).  
Overflow usually wraps around silently, except during division by zero or in certain modulo operations.

Examples:
  set /a n=(2+3)*5
  set /a modulo=14%%3    // Must escape '%' in batch files
  set /a "big=0xffffffff"   // Interpreted as -1 in two's complement
  set /a "n=-1>>1"          // Arithmetic right shift


--------------------------------------------------------------------------------
16. Finding Files
--------------------------------------------------------------------------------
Windows provides multiple methods:

- DIR /S: Recursively searches for files.
- FOR /R: Iterates over files in subdirectories.
- FORFILES: Searches by date or filters.
- WHERE: Locates executables in PATH.
- FINDSTR: Searches file contents using regular expressions.

Examples:
  dir /b /s *base*.doc*
  for /r %i in (*) do @if %~zi geq 1000000 echo %~zi %i
  forfiles /s /d 06/10/2015 /c "cmd /c echo @fdate @path"
  findstr /i /s /m cat.*mat *.txt
  where *.bat


--------------------------------------------------------------------------------
17. Keyboard Shortcuts
--------------------------------------------------------------------------------
When working in the standard Windows console:

- Tab       : Autocomplete file/folder names.
- ↑ / ↓      : Navigate command history.
- F1         : Replays the previous command's characters one by one.
- F3         : Replays the entire last command.
- F7         : Displays a history menu.
- Ctrl+C     : Terminates the current operation.
- Alt+F7     : Clears command history.
- Ctrl+M     : Sometimes used to insert a carriage return in certain scenarios.


--------------------------------------------------------------------------------
18. Paths
--------------------------------------------------------------------------------
A valid Windows path can include a drive letter followed by :, and must use backslashes (\) as separators (although forward slashes might work in limited scenarios). UNC paths start with \\server\share. Special device names like NUL, CON, or COM1 should not be used as standard filenames.

Examples:
  attrib C:\Windows\System32\notepad.exe
  cd /d C:\Windows\System32
  pushd \\myserver\folder

Note: The /d switch with cd allows changing drives along with directories in a single command.


--------------------------------------------------------------------------------
19. Arrays
--------------------------------------------------------------------------------
Batch does not support true arrays. However, one may approximate arrays via variable naming combined with delayed expansion:

  @echo off
  setlocal EnableDelayedExpansion
  for /l %%i in (1,1,10) do (
    set array_%%i=!random!
  )
  for /l %%i in (1,1,10) do (
    echo !array_%%i!
  )

You can also store file lines in variables in a similar manner (though limited by memory and environment space). 

Example reading lines from a text file:
  @echo off
  setlocal EnableDelayedExpansion
  set /a count=0
  for /f "usebackq delims=" %%A in ("lines.txt") do (
    set /a count+=1
    set line_!count!=%%A
  )
  echo Total lines: !count!
  echo First line: !line_1!


--------------------------------------------------------------------------------
20. Perl One-Liners
--------------------------------------------------------------------------------
If Perl is installed, it can be called from the batch environment:

  echo "abcbbc" | perl -pe "s/a.*?c/ac/"
  echo a b | perl -lane "print $F[1]"
  perl -ne "print if /\x22hello\x22/" file.txt

Such commands provide advanced text-manipulation functionalities beyond FINDSTR.


--------------------------------------------------------------------------------
21. Unix Commands
--------------------------------------------------------------------------------
You can integrate Unix-like commands into Windows by installing third-party tools (e.g., GnuWin32, ezwinports) or by enabling the Windows Subsystem for Linux (WSL) on Windows 10 or higher. Common Unix utilities include grep, sed, awk, head, and tail.

Example:
  grep "search" myfile.txt
  sed "s/foo/bar/g" input.txt > output.txt
  wsl ls -l /home


--------------------------------------------------------------------------------
22. Changing File Timestamps
--------------------------------------------------------------------------------
Windows does not have a built-in touch command. A workaround is:
  copy /b file.txt+,, 
This can update the last-modified timestamp of file.txt in some scenarios.

Alternatively, if PowerShell is available:
  powershell -command "(Get-Item file.txt).LastWriteTime = Get-Date"


--------------------------------------------------------------------------------
23. Getting Last Lines
--------------------------------------------------------------------------------
Windows does not provide a built-in equivalent to tail. Possible solutions include:
- A custom batch script to display last lines.
- Installing a tail utility from a third-party source (like tail from GnuWin32).
- Using PowerShell's Get-Content -Tail <n> (in modern Windows).


--------------------------------------------------------------------------------
24. Hex Dump
--------------------------------------------------------------------------------
Windows does not provide a built-in hex dump utility. Options:
- Use fc /b with a file of zero bytes as a comparison (not very friendly for real hex dumps).
- Use certutil -encodeHex file filehex.txt (built into modern Windows).
- Install od or hexdump from a Unix port.
- Use PowerShell's Format-Hex.
- For legacy (32-bit) systems, use the DOS debug tool with limitations.


--------------------------------------------------------------------------------
25. Running with Elevated Privileges
--------------------------------------------------------------------------------
To run cmd.exe with administrator privileges, search for cmd in the Start menu, right-click, and select "Run as administrator."  
Check if elevated privileges are present by running:
  net session
If it fails, you do not have elevated privileges.

--------------------------------------------------------------------------------
Limitations of cmd.exe
--------------------------------------------------------------------------------
- No native while loops (must use goto labels).
- No direct break/continue for loops.
- No true function definitions—emulated with labels and CALL.
- Limited handling of special characters in strings.
- No arrays or dictionaries (only workarounds).
- No floating-point arithmetic.
- No built-in commands like touch, head, or tail.
- Restricted GUI development.
- Integer arithmetic is confined to 32-bit signed range.

--------------------------------------------------------------------------------
Built-In Commands in cmd.exe
--------------------------------------------------------------------------------
Below is a high-level overview of core built-in commands. For details, type <command> /?.

Command     Description
ASSOC       Associates file extensions with file types (used with FTYPE).
BREAK       No effect in Windows NT; left for compatibility.
CALL        Invokes another batch script or a subroutine within the same script.
CD/CHDIR    Changes or displays the current directory.
CLS         Clears the screen.
COLOR       Sets text and background colors in the console.
COPY        Copies one or more files.
DATE        Displays or sets the system date.
DEL/ERASE   Deletes files (not directories).
DIR         Lists files and folders.
DPATH       Sets or shows the search path for data files (undocumented).
ECHO        Toggles command echoing or displays messages.
ELSE        Used in conditional batch logic with IF.
ENDLOCAL    Ends localization of environment variable changes.
EXIT        Exits cmd.exe or a batch script.
FOR         Executes a command for each item in a set.
FTYPE       Defines command lines associated with file types (paired with ASSOC).
GOTO        Jumps to a labeled line in a batch script.
HELP        Displays help for Windows commands.
IF          Conditional processing in scripts.
KEYS        Displays or sets the KEYS environment variable (undocumented).
MD/MKDIR    Creates a directory.
MOVE        Moves or renames files and folders.
PATH        Views or modifies the PATH environment variable.
PAUSE       Pauses script execution and waits for user input.
POPD        Restores the directory saved by PUSHD.
PROMPT      Changes or displays the command-line prompt.
PUSHD       Saves the current directory and switches to a new one.
RD/RMDIR    Removes a directory.
REM         Adds a comment in a batch file.
REN/RENAME  Renames a file or directory.
SET         Views, sets, or clears environment variables; can also prompt user input (/P) or perform arithmetic (/A).
SETLOCAL    Begins localization of environment changes.
SHIFT       Adjusts positional parameters %1, %2, etc.
START       Launches a new window or program.
TIME        Displays or sets the system time.
TITLE       Sets the console window title.
TYPE        Displays the contents of a text file.
VER         Displays the Windows or command-processor version.
VERIFY      Enables or disables file-copy verification.
VOL         Shows the disk label and volume serial number.

For each of these, typing the command followed by /? generally produces usage information.

--------------------------------------------------------------------------------
External Commands
--------------------------------------------------------------------------------
Windows also provides additional executables not built into cmd.exe. Many support the /? switch for help. These include ARP, ATTRIB, FIND, FINDSTR, PING, XCOPY, ROBOCOPY, TASKLIST, TASKKILL, SCHTASKS, SHUTDOWN, POWERSHELL, and many more.

Some notable ones:
- FIND / FINDSTR: Search file contents; FINDSTR supports limited regex.
- XCOPY / ROBOCOPY: Extended file copy utilities; ROBOCOPY is more robust and supersedes XCOPY in newer Windows versions.
- TASKLIST / TASKKILL: Lists or terminates running processes.
- SCHTASKS: Creates and manages scheduled tasks.
- SHUTDOWN: Shuts down or restarts the system.
- WMIC: Windows Management Instrumentation Command-line for querying system information.

Example external commands:
  ping 127.0.0.1
  xcopy C:\source C:\backup /e
  shutdown /r /t 30

--------------------------------------------------------------------------------
End of Expanded Content
--------------------------------------------------------------------------------

All sections above are plain text only. This completes the overview of using cmd.exe (the Windows Command Interpreter) on NT-based systems, illustrating how commands and scripts are processed and highlighting common techniques and examples.