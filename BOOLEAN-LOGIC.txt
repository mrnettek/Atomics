BOOLEAN LOGIC HELP FILE: PowerShell & Batch

[POWERSHELL]

This part of the document provides a comprehensive overview of Boolean logic in PowerShell, covering fundamental concepts, operators, examples, and best practices for using Boolean expressions in scripts and command-line operations.


[INTRODUCTION]

Boolean logic deals with expressions that evaluate to one of two values: $true or $false. In PowerShell, Boolean expressions are used throughout the languageâ€”for conditional checks, loops, and filtering data. 

Knowing how Boolean operators work is essential for writing clear, correct, and efficient scripts.



[BASIC BOOLEAN VALUES]

$true indicates a condition is satisfied.
$false indicates a condition is not satisfied.
These special values are of type [System.Boolean] in .NET (the underlying platform for PowerShell).


[EXAMPLES]

$var = $true
if ($var) { "Value is true." }

$var = $false
if ($var) { "Will not print." } else { "Value is false." }



[COMPARISON OPERATORS]

Comparison operators return $true or $false based on how two values relate to each other. 

Common comparison operators include:
 -eq: Equal to
 -ne: Not equal to
 -gt: Greater than
 -ge: Greater than or equal to
 -lt: Less than
 -le: Less than or equal to
 -like: Wildcard pattern match
 -notlike: Wildcard pattern mismatch
 -match: Regex match
 -notmatch: Regex mismatch
 -contains: Checks if a collection contains a value
 -notcontains: Checks if a collection does not contain a value
 -in: Checks if a value is in a collection
 -notin: Checks if a value is not in a collection


[EXAMPLES]

1 -eq 1                # True

"apple" -ne "banana"   # True

10 -gt 5               # True

10 -lt 5               # False

"Hello" -like "H*"     # True (Wildcard pattern)

"Hello" -match "^H\w+" # True (RegEx match)



[LOGICAL OPERATORS]

PowerShell provides logical operators to combine or invert Boolean expressions.


4.1) -and

Evaluates to $true if both operands are $true, otherwise $false.

($true -and $true)    # True
($true -and $false)   # False
(1 -eq 1 -and 2 -eq 2)   # True



4.2) -or

Evaluates to $true if either operand is $true, otherwise $false.

($false -or $true)    # True
(1 -eq 2 -or 2 -eq 2) # True



4.3) -xor

Evaluates to $true if exactly one operand is $true, otherwise $false.


($true -xor $true)    # False
($true -xor $false)   # True
($false -xor $false)  # False



4.4) -not or !

Inverts a Boolean value: $true becomes $false, $false becomes $true.

-not $true    # False
!($false)     # True



[OPERATOR PRECEDENCE]

When multiple logical operators appear in a single expression, PowerShell applies the following precedence (from highest to lowest):

Parentheses ( ... )
-not or !
-and
-or
-xor


To avoid confusion, you can group expressions using parentheses to explicitly define evaluation order:

# Without parentheses, -and will bind before -or
# This can cause unexpected results if you don't plan carefully.

($true -or $false) -and $false  # Evaluates to False

# With parentheses to alter precedence:
$true -or ($false -and $false)  # Evaluates to True



[BOOLEAN EXPRESSIONS IN CONDITIONALS]

6.1) if / elseif / else

if (Test-Path "C:\Temp") {
    "Path exists."
} elseif (Test-Path "D:\Temp") {
    "Using D:\Temp instead."
} else {
    "No valid path found."
}



6.2) switch

switch ($someValue) {
    1 { "Value is 1"; break }
    2 { "Value is 2"; break }
    default { "Value is something else." }
}


When using switch -Regex, each case is a regular expression check that returns $true or $false for each line or value:

switch -Regex ("Warning: Low disk space", "Error: File not found") {
    "^Error:"   { "Handle error" }
    "^Warning:" { "Handle warning" }
}



6.3) Ternary-Like Operation

PowerShell 7 introduces a ternary-like ? : operator:

$condition = $true
$result = $condition ? "Yes" : "No"


[SHORT-CIRCUIT BEHAVIOR]

Like many languages, PowerShell short-circuits certain Boolean operations:

-and stops evaluating the second operand if the first operand is $false.
-or stops evaluating the second operand if the first operand is $true.

This can be helpful for performance or for avoiding errors, such as calling a method on $null only if an object is not $null.


[EXAMPLES]

($false -and (Do-Something))   # Do-Something is never called
($true -or (Do-Something))     # Do-Something is never called


CONVERTING VALUES TO BOOLEAN
When non-Boolean values appear in a Boolean context, PowerShell automatically converts them to [bool].

Non-empty strings (ex: "Hello") convert to $true.
Empty strings ("") convert to $false.
Non-zero numbers (ex: 5) convert to $true.
Zero (0) converts to $false.
$null also converts to $false.


[EXAMPLES]

if ("Hello") { "Non-empty string is true." }
if (0) { "Never prints." } else { "Zero is false." }
if ($null) { "Never prints." }


You can force a Boolean conversion explicitly:

[bool]"Some text"    # True
[bool]"            " # True (string is not empty, even if it has spaces)
[bool]0              # False



[ADVANCED USAGE EXAMPLES]

9.1) Combining Multiple Conditions

if ((Get-Process 'notepad' -ErrorAction SilentlyContinue) -and (Get-Service 'Spooler' -ErrorAction SilentlyContinue)) {
    "Notepad process is running AND Spooler service is found."
}



9.2) Validating Input

# Check if user input is numeric and within a specific range
$userInput = Read-Host "Enter a number"
if ($userInput -match '^\d+$' -and [int]$userInput -ge 1 -and [int]$userInput -le 10) {
    "Valid input."
} else {
    "Invalid input."
}



9.3) Using Boolean Return in Functions

function Test-FileExists($path) {
    return Test-Path $path  # This returns $true or $false
}

if (Test-FileExists "C:\file.txt") {
    "File found."
} else {
    "File not found."
}



[BITWISE OPERATORS] 

(FOR COMPLETENESS)]

Though not purely Boolean operators, PowerShell also has bitwise operators. These operate on the binary representations of numbers:

-band (bitwise AND)
-bor (bitwise OR)
-bxor (bitwise XOR)
-bnot (bitwise NOT)


[EXAMPLES]

8 -band 4   # 8 in binary: 1000, 4 in binary: 0100, result = 0
8 -bor 4    # 1000 OR 0100 = 1100 (decimal 12)

These are different from -and, -or, and -xor, which evaluate Boolean logic on entire expressions, not individual bits.



[NOTES]

Boolean Values: $true / $false.

Comparison Operators: -eq, -ne, -gt, -lt, etc., returning $true or $false.

Logical Operators: -and, -or, -xor, -not combine or invert Boolean expressions.

Operator Precedence: Parentheses > -not > -and > -or > -xor.

Short-Circuiting: Certain logical operators skip evaluating the second expression if the first determines the outcome.

Implicit Conversions: PowerShell converts many types to Boolean, with non-empty / non-zero values as $true, zero / $null / empty as $false.




[BATCH]

Although this help file focuses on PowerShell, you might occasionally need to work with traditional Windows batch scripts (files with a .bat or .cmd extension). 

Batch scripting handles logic differently from PowerShell, with fewer native Boolean operators. Below is a concise overview of Boolean-like logic in batch files.

21.1) Basic IF Statement

In batch scripts, IF statements are the primary means for conditional logic:
 IF [NOT] EXIST <filename> <command>
 IF [NOT] <string1>==<string2> <command>
 IF [NOT] ERRORLEVEL <number> <command>
 IF DEFINED <variable> <command>
 IF EXIST <filename> checks if a file exists.
 IF <string1>==<string2> compares two strings.
 
 Add the switch /I for case-insensitive compare: IF /I "Hello"=="hello".
 
 IF ERRORLEVEL <number> checks if the current ERRORLEVEL is greater than or equal to <number>.
 IF DEFINED <variable> checks if an environment variable is defined (not empty).

You can optionally use NOT to invert the condition:
 IF NOT EXIST C:\file.txt ECHO "File not found!"



21.2) Using IF with ELSE

Batch files support IF ... ( ) ELSE ( ) structures for branching:
IF %ERRORLEVEL%==0 (
    ECHO Success!
) ELSE (
    ECHO Failure or non-zero return code.
)

Note:

Parentheses must be on the same line as IF or ELSE statements, or carefully continued to the next line.
Quoting variables is recommended to avoid issues with special characters.



21.3) Combining Conditions with && and ||

In batch, && and || provide rudimentary "AND" / "OR" behavior at the command level (not within a single IF statement):

command1 && command2 runs command2 only if command1 succeeds (ERRORLEVEL = 0).
command1 || command2 runs command2 only if command1 fails (ERRORLEVEL != 0).


[EXAMPLES]

REM This only executes "echo All good" if "dir" succeeds (no error):
 dir C:\SomeFolder && echo All good

REM This only executes "echo An error occurred" if "dir" fails:
 dir C:\SomeFolder || echo An error occurred

This is not the same as a true Boolean expression, but it lets you chain commands based on success or failure.



21.4) Checking Multiple Conditions

Batch scripting does not provide a built-in AND or OR keyword for multiple IF conditions. 

Instead, you can nest IF statements or chain commands:

IF EXIST C:\file.txt (
    IF %USERNAME%==Administrator (
        ECHO "File found, and you are admin."
    )
)

Alternatively, you might leverage && or || if you want to combine multiple checks based on command success/failure.



21.5) ERRORLEVEL Nuances

When a command runs, it sets a numeric exit code (ERRORLEVEL). The batch IF syntax interprets IF ERRORLEVEL N as "If the error level is greater than or equal to N."

Examples:
 IF ERRORLEVEL 1 ECHO "An error or warning occurred"
 IF ERRORLEVEL 2 ECHO "A more severe error occurred"

To check for an exact value, you often see a pattern like this:

IF %ERRORLEVEL%==0 (
    ECHO "Exact check: exit code 0"
) ELSE IF %ERRORLEVEL%==1 (
    ECHO "Exact check: exit code 1"
)



21.6) Negation with NOT
You can prefix the IF statement or the condition with NOT:

IF NOT EXIST D:\BackupFolder (
    ECHO "Backup folder not found."
)

For string compares:

IF NOT "%USERDOMAIN%"=="CORP" (
    ECHO "You are not in the CORP domain."
)



[NOTES]

Batch scripts do not have direct Boolean expressions like PowerShellâ€™s -and, -or, -xor.

Logical checks are primarily done with the IF statement and specialized keywords (EXIST, ERRORLEVEL, DEFINED).

Command-level chaining uses && (execute next if success) and || (execute next if failure).

You can nest IF statements or combine commands to simulate more complex logic.

ERRORLEVEL handling is unique: IF ERRORLEVEL N means "if exit code >= N."

This limited Boolean system can handle many routine scripting tasks but is less flexible than PowerShellâ€™s rich Boolean operators and expressions.
